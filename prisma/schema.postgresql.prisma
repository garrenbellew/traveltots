generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id                       String   @id @default(cuid())
  username                 String   @unique
  password                 String
  email                    String   @unique
  twoFactorEnabled         Boolean  @default(false)
  twoFactorSecret          String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  whatsappNumber           String?
  whatsappMessageCancelled String?
  whatsappMessageCompleted String?
  whatsappMessageConfirmed String?
  whatsappMessageDelivered String?
  popularCategories        String?  // Comma-separated category slugs

  @@map("Admin")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
  pages       Page[]

  @@map("Category")
}

model Product {
  id                String       @id @default(cuid())
  name              String
  slug              String       @unique
  description       String
  price             Float
  image             String?
  categoryId        String
  category          Category      @relation(fields: [categoryId], references: [id])
  totalStock        Int          @default(0)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  isActive          Boolean      @default(true)
  isBundle          Boolean      @default(false)
  stockBlocks       StockBlock[]
  orderItems        OrderItem[]
  bundles           ProductBundle[] @relation("BundleItems")

  @@map("Product")
}

model ProductBundle {
  id        String   @id @default(cuid())
  productId String
  bundleId  String
  product   Product  @relation("BundleItems", fields: [productId], references: [id])
  quantity  Int

  @@map("ProductBundle")
}

model StockBlock {
  id              String   @id @default(cuid())
  productId       String
  quantity        Int
  startDate       DateTime
  endDate         DateTime
  orderId         String?
  product         Product  @relation(fields: [productId], references: [id])
  order           Order?   @relation(fields: [orderId], references: [id])

  @@map("StockBlock")
}

model Order {
  id                     String        @id @default(cuid())
  orderNumber             String        @unique
  customerId              String?
  customerName            String
  customerEmail           String
  customerPhone           String
  customerAddress         String
  flightDetails           String?
  specialRequests         String?
  rentalStartDate         DateTime
  rentalEndDate           DateTime
  status                  String        @default("PENDING")
  adminNotes              String?
  termsAccepted           Boolean       @default(false)
  totalPrice              Float
  confirmedAt             DateTime?
  completedAt             DateTime?
  cancelledAt             DateTime?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  deliveredAt             DateTime?
  
  // Delivery coordination fields
  deliveryType            String?        // "AIRPORT", "ACCOMMODATION", "DUAL"
  // Airport delivery details
  outboundAirport         String?
  arrivalTime             String?
  onwardJourney           String?        // CAR_HIRE, TAXI, PRIVATE_TRANSFER, FRIEND_FAMILY
  returnAirport           String?
  returnArrivalTime       String?
  returnFlightNumber       String?
  returnDepartureTime     String?
  // Accommodation delivery details
  accommodationArrival     String?
  accommodationDeparture   String?
  
  customer                Customer?      @relation(fields: [customerId], references: [id])
  items                   OrderItem[]
  messages                 OrderMessage[]
  stockBlocks             StockBlock[]

  @@map("Order")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("OrderItem")
}

model Page {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  content     String
  isActive    Boolean   @default(true)
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])

  @@map("Page")
}

model Customer {
  id        String         @id @default(cuid())
  name      String
  email     String         @unique
  phone     String
  password  String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  orders    Order[]
  messages  OrderMessage[]
  isActive  Boolean        @default(true)

  @@map("Customer")
}

model OrderMessage {
  id         String    @id @default(cuid())
  orderId    String
  customerId String?
  sender     String    @default("CUSTOMER")
  message    String
  isRead     Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  customer   Customer? @relation(fields: [customerId], references: [id])
  order      Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@map("OrderMessage")
}

model PricingConfig {
  id                        String  @id @default(cuid())
  minOrderValue             Float
  airportMinOrder           Float
  weeklyPricePercentIncrease Float
  bundleDiscountPercent     Float   @default(0)      // Percentage discount applied to bundles
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@map("PricingConfig")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  customerId String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("PasswordResetToken")
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  location  String
  rating    Int
  content   String
  image     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Testimonial")
}

